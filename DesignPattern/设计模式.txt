策略模式：定义算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

观察者模式：在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。

装饰者模式：动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。

工厂模式：定义了一个创建对象的接口，但由于类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子类。

单例模式：确保一个类只有一个实例，并提供全局访问点。

命令模式：将请求封装成对象，这可以让你使用不同的请求、队列、或者日志请求来参数化其他对象。命令模式也可以支持撤销操作。

适配器、外观模式：
1、将一个类的接口，转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以合作无间。
2、提供了一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层接口，让子系统更容易使用。

模块方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。

迭代器模式、组合模式：
1、提供一种算法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
2、允许你将对象组成树形接口来表现“整体/部分”的层次结构。组合能让客户以一致的方法处理个别对象和对象组合。

状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。

代理模式：为另一个对象提供一个替身或占位符以控制对这个对象的访问。

复合模式：复合模式结合两个或以上的模式，组成一个解决方法，解决一再发生的一般性问题。